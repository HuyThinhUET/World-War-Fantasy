#include <bits/stdc++.h>
#include <SDL.h>
#include <SDL_image.h>
using namespace std;

const int SCREEN_WIDTH = 1280;
const int SCREEN_HEIGHT = 720;

///~~~~~~~~~~~~~~~~~~~~~~~~~~~start merge 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mt19937 rd(chrono::steady_clock::now().time_since_epoch().count());
#define rand rd;

int Rand(int l, int r) { // sinh 1 số ngẫu nhiên trong đoạn [l; r]
    return l+(1ll*rd()*rd()%(r-l+1) +(r-l+1))%(r-l+1);
}


int frame=0, cntlinh=0;
int cntlinhplayer=0, cntlinhbot=0;
int playergold=2000;
int trangthai=2;
bool chedokho=false;
queue<int> binhchungplayer;
const int delays=6;
///~~~~~~~~~~~~~~~~~~~~~~~~~~~end merge 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//Starts up SDL and creates window
bool init();

//Loads media
bool loadMedia();

//Frees media and shuts down SDL
void close();

//The window we'll be rendering to
SDL_Window* gWindow = NULL;

//The window renderer
SDL_Renderer* gRenderer = NULL;

class LTexture
{
	public:
	    int xx=0;
		LTexture();
		~LTexture();
		bool loadFromFile( string path );
		void free();
		void setColor( Uint8 red, Uint8 green, Uint8 blue );
		void setBlendMode( SDL_BlendMode blending );
		void setAlpha( Uint8 alpha );
		void render( int x, int y, SDL_Rect* clip = NULL, bool flip=false, bool hero=false);
		int getWidth();
		int getHeight();

	private:
		SDL_Texture* mTexture;
		int mWidth;
		int mHeight;
};

LTexture gSpriteSheetTexture;

LTexture::LTexture()
{
	//Initialize
	mTexture = NULL;
	mWidth = 0;
	mHeight = 0;
}

LTexture::~LTexture()
{
	//Deallocate
	free();
}

bool LTexture::loadFromFile( string path )
{
	//Get rid of preexisting texture
	free();

	//The final texture
	SDL_Texture* newTexture = NULL;

	//Load image at specified path
	SDL_Surface* loadedSurface = IMG_Load( path.c_str() );
	if( loadedSurface == NULL )
	{
		printf( "Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError() );
	}
	else
	{
		//Color key image
		SDL_SetColorKey( loadedSurface, SDL_TRUE, SDL_MapRGB( loadedSurface->format, 255, 255, 255 ) );

		//Create texture from surface pixels
        newTexture = SDL_CreateTextureFromSurface( gRenderer, loadedSurface );
		if( newTexture == NULL )
		{
			printf( "Unable to create texture from %s! SDL Error: %s\n", path.c_str(), SDL_GetError() );
		}
		else
		{
			//Get image dimensions
			mWidth = loadedSurface->w;
			mHeight = loadedSurface->h;
		}

		//Get rid of old loaded surface
		SDL_FreeSurface( loadedSurface );
	}

	//Return success
	mTexture = newTexture;
	return mTexture != NULL;
}

void LTexture::free()
{
	//Free texture if it exists
	if( mTexture != NULL )
	{
		SDL_DestroyTexture( mTexture );
		mTexture = NULL;
		mWidth = 0;
		mHeight = 0;
	}
}

void LTexture::setColor( Uint8 red, Uint8 green, Uint8 blue )
{
	//Modulate texture rgb
	SDL_SetTextureColorMod( mTexture, red, green, blue );
}

void LTexture::setBlendMode( SDL_BlendMode blending )
{
	//Set blending function
	SDL_SetTextureBlendMode( mTexture, blending );
}

void LTexture::setAlpha( Uint8 alpha )
{
	//Modulate texture alpha
	SDL_SetTextureAlphaMod( mTexture, alpha );
}

int LTexture::getWidth()
{
	return mWidth;
}

int LTexture::getHeight()
{
	return mHeight;
}

bool init()
{
	//Initialization flag
	bool success = true;

	//Initialize SDL
	if( SDL_Init( SDL_INIT_VIDEO ) < 0 )
	{
		printf( "SDL could not initialize! SDL Error: %s\n", SDL_GetError() );
		success = false;
	}
	else
	{
		//Set texture filtering to linear
		if( !SDL_SetHint( SDL_HINT_RENDER_SCALE_QUALITY, "1" ) )
		{
			printf( "Warning: Linear texture filtering not enabled!" );
		}

		//Create window
		gWindow = SDL_CreateWindow( "World War Fantasy", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
		if( gWindow == NULL )
		{
			printf( "Window could not be created! SDL Error: %s\n", SDL_GetError() );
			success = false;
		}
		else
		{
			//Create vsynced renderer for window
			gRenderer = SDL_CreateRenderer( gWindow, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC );
			if( gRenderer == NULL )
			{
				printf( "Renderer could not be created! SDL Error: %s\n", SDL_GetError() );
				success = false;
			}
			else
			{
				//Initialize renderer color
				SDL_SetRenderDrawColor( gRenderer, 255, 255, 255, 255 );

				//Initialize PNG loading
				int imgFlags = IMG_INIT_PNG;
				if( !( IMG_Init( imgFlags ) & imgFlags ) )
				{
					printf( "SDL_image could not initialize! SDL_image Error: %s\n", IMG_GetError() );
					success = false;
				}
			}
		}
	}

	return success;
}

void close()
{
	//Free loaded images
	gSpriteSheetTexture.free();

	//Destroy window
	SDL_DestroyRenderer( gRenderer );
	SDL_DestroyWindow( gWindow );
	gWindow = NULL;
	gRenderer = NULL;

	//Quit SDL subsystems
	IMG_Quit();
	SDL_Quit();
}

///~~~~~~~~~~~~~~~~~~~~~~~~~~~start merge 2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int binhchungs[]=  {-1,   1,    2,    3,    1,    2,    3,    4,     4,     4   };
int HPs[] =        {-1,   150,  100,  50,   200,  200,  200,  2000,  1500,  3000};
int dames[] =      {-1,   34,   20,   300,  50,   40,   50,   300,   0,     0   };
int SPDatks[] =    {-1,   24,   24,   24,   24,   24,   24,   24,    0,     0   };
int ranges[] =     {-1,   5,    190,  5,    15,   220,  15,   15,    0,     0   };
int SPDs[] =       {-1,   2,    2,    3,    2,    2,    2,    3,     0,     0   };
int costs[]=       {-1,   60,   55,   50,   100,  110,  120,  1500,  0,     0   };
int killrewards[]= {-1,   75,   70,   65,   135,  145,  155,  2000,  0,     0   };

struct Troop{
    LTexture Textt;
    int stt;
    int l, r;
    int id;
    int phe;
    int binhchung;
    int HP;
    int dame;
    int SPDatk;
    int range;
    int SPD;
    int deadframe;
    int attackframe;
    int cooldownframe;
    int cost;
    int killreward;
    int prev;
    int behind;

    Troop(){
        stt=0;
        l=0;
        r=0;
        id=0;
        phe=0;
        binhchung=0;
        HP=0;
        dame=0;
        SPDatk=0;
        range=0;
        SPD=0;
        deadframe=0;
        attackframe=0;
        cooldownframe=0;
        cost=0;
        killreward=0;
        prev=-1;
        behind=-1;
    }

    Troop(int idd, int thutu, int phee) {
        stt=thutu;
        if(!phee) {
            l=201;

            if(5<=idd && idd<=6) r=l+45;
            else if(idd==4) r=l+35;
            else if(idd==1) r=l+40;
            else if(idd==2) r=l+55;
            else if(idd==3) r=l+50;
            else r=l+96;

            if(8 <= idd && idd <= 9) {l=0; r=l+200;}
        }
        else {
            r=1079;
            if(5<=idd && idd<=6) l=r-45;
            else if(idd==4) l=r-30;
            else if(idd==1) l=r-40;
            else if(idd==2) l=r-55;
            else if(idd==3) l=r-50;
            else l=r-96;
            if(8 <= idd && idd <= 9) {r=1280; l=r-200;}
        }
        if(idd==7) {
            r=l+140;
        }
        Textt.xx=l;
        id=idd;
        phe=phee;
        binhchung = binhchungs[idd];
        HP = HPs[idd];
        dame = dames[idd];
        SPDatk = SPDatks[idd];
        range = ranges[idd];
        if(!phee) SPD = SPDs[idd];
        else SPD = -SPDs[idd];
        deadframe=0;
        attackframe=0;
        cooldownframe=0;
        cost=costs[idd];
        killreward=killrewards[idd];
        prev=-1;
        behind=-1;
    }
};

vector<Troop> danhsachquan;

bool CreateTroop(int id, int phe=false, bool hard=false) { //nếu là tạo lính cho phe player thì chỉ cần nhập 2 tham số đầu vào do hard mặc định bằng false
    if(phe && cntlinhbot>=8) return false;
    if(!phe && cntlinhplayer>=8) return false;
    if(!phe && playergold<costs[id]) return false;

    Troop linh(id, ++cntlinh, phe);
    if(phe && hard) linh.HP += linh.HP/2;
    if(phe && hard) linh.killreward -= 10;
    if(!phe) playergold -= linh.cost;

    if(phe && id<8) {
        for(int i=danhsachquan.size()-1; i>=0; i--)
            if(danhsachquan[i].phe==1 && danhsachquan[i].id<8) {
//                cout<<"Tao va ket noi thanh cong: "<<danhsachquan[i].stt<<" "<<linh.stt<<"\n";
                linh.prev= danhsachquan[i].stt;
                danhsachquan[i].behind = linh.stt;
                break;
            }
    }

    danhsachquan.push_back(linh);
    if(!phe) binhchungplayer.push(binhchungs[id]);

    if(id!=8 && id!=9) {
        if(phe) cntlinhbot++;
        else cntlinhplayer++;
    }

    return true;
}

void ClearTroop(int thutu) {
    for(int i=0; i<danhsachquan.size(); i++)
        if(danhsachquan[i].stt == thutu) {
            if(danhsachquan[i].phe) {
                cntlinhbot--;
                playergold+=danhsachquan[i].killreward;

                int luul=-1, luur=-1;
                for(int l=i-1; l>=0; l--)
                    if(danhsachquan[l].stt == danhsachquan[i].prev) {
                        luul=l; break;
                    }
                for(int r=i+1; r<danhsachquan.size(); r++)
                    if(danhsachquan[r].stt == danhsachquan[i].behind) {
                        luur=r; break;
                    }
                if(luul!=-1) danhsachquan[luul].behind=luur;
                if(luur!=-1) danhsachquan[luur].prev=luul;
            }
            else {
                binhchungplayer.pop();
                cntlinhplayer--;
            }

            danhsachquan.erase( danhsachquan.begin()+i );
            break;
        }
}

void LTexture::render( int x, int y, SDL_Rect* clip, bool flip, bool hero){
	//Set rendering space and render to screen
	SDL_Rect renderQuad = { x, y, mWidth, mHeight };

	//Set clip rendering dimensions
	if( clip != NULL )
	{
		renderQuad.w = clip->w;
		renderQuad.h = clip->h;
	}

    if(hero) renderQuad.y= 620 - renderQuad.h;
    else renderQuad.y= 600 - renderQuad.h;

	//Render to screen
	if(!flip) SDL_RenderCopy( gRenderer, mTexture, clip, &renderQuad );
	else {
	    SDL_RendererFlip flipType= SDL_FLIP_HORIZONTAL;
        SDL_RenderCopyEx( gRenderer, mTexture, clip, &renderQuad, 0.0, nullptr, flipType);
	}
}

void LoadSprite(LTexture &Textt, string path, int frame, int timedelay, int numsheets, bool flip) {
    if(path != "-1" && !Textt.loadFromFile(path.c_str())) {
        cout<<"Khong mo duoc link sau: "<<path<<"\n";
        exit(0);
    }

    int xsum=Textt.getWidth();
    int ysum=Textt.getHeight();

    if(numsheets == 0) { //nếu không phải objectile thì đầu vào là 0
        numsheets = xsum/ysum;
    }

    SDL_Rect KichThuoc[numsheets+1];
    for(int i=0; i<numsheets; i++) {
        KichThuoc[i].x= i*(xsum/numsheets);
        KichThuoc[i].y= 0;
        KichThuoc[i].w= xsum/numsheets;
        KichThuoc[i].h= ysum;
    }

    SDL_Rect* currentClip = &KichThuoc[ (frame / timedelay)%numsheets ];
    Textt.render( Textt.xx , 0, currentClip, flip );
}

string taolink(int id, string thaotac) {
    string res="TroopSprite/";
    char c='0'+id;
    res+=c;
    res+='/';
    res+=thaotac;
    res+=".png";
    return res;
}

void WorkBase(Troop &doituong) {
    //xu ly endgame
//    if(doituong.HP<=0) {
//        if(trangthai == 2) {
//            if(doituong.phe) //move to next stage
//            else //cout<<"You lose";
//        }
//        if(thangthai == 3) {
//            if(doituong.phe) //cout<<"You win"
//            else //cout<<"You lose"
//        }
//    }

    string path=taolink(doituong.id, "Base");
    if(!doituong.Textt.loadFromFile(path.c_str())) {
        cout<<"Khong mo duoc link sau: "<<path<<"\n";
        exit(0);
    }

    SDL_Rect KichThuoc;

    KichThuoc.x= 0;
    KichThuoc.y= 0;
    KichThuoc.w= 200;
    KichThuoc.h= 200;

    SDL_Rect* currentClip = &KichThuoc;

    doituong.Textt.render( doituong.Textt.xx , 0, currentClip, doituong.phe, false );
    return;
}

void tancong(Troop &attacker, Troop &defender) {
    int satthuong=attacker.dame;
    if(attacker.binhchung == 1 && defender.binhchung == 2) satthuong*=2;
    if(attacker.binhchung == 2 && defender.binhchung == 3) satthuong*=2;
    if(attacker.binhchung == 3 && defender.binhchung == 1) satthuong*=2;
    if(attacker.id == 2 && defender.id == 3) satthuong= satthuong/2*3;

    defender.HP -= satthuong;
}

void Work(Troop &doituong) {
    bool EnemyInRange=false;
    for(int i=0; i<danhsachquan.size(); i++) {
        if(danhsachquan[i].phe == doituong.phe) continue;
        if( ((abs(doituong.r - danhsachquan[i].l) <= doituong.range) && !doituong.phe )  ||  (( abs(danhsachquan[i].r - doituong.l) <= doituong.range ) && doituong.phe) ) {
            EnemyInRange=true;
            break;
        }
        if( max(danhsachquan[i].l, doituong.l) <= min(danhsachquan[i].r, doituong.r) ) EnemyInRange=true;
    }
    if(doituong.id==3 && doituong.deadframe!=0) EnemyInRange=true;

    bool AllyInFrontOfArcher=false;
    for(int i=0; i<danhsachquan.size(); i++) {
        if(danhsachquan[i].phe != doituong.phe) continue;
        if(danhsachquan[i].stt == doituong.stt) continue;
        if( ( doituong.r < danhsachquan[i].l && !doituong.phe )  ||  (danhsachquan[i].r < doituong.l && doituong.phe) ) {
            AllyInFrontOfArcher=true;
            break;
        }
    }

    int khoangcachcho;
    int deltax=doituong.SPD;

    bool CanMove=true;
    for(int i=0; i<danhsachquan.size(); i++) {
        if(danhsachquan[i].stt == doituong.stt) continue;

        if(doituong.phe==danhsachquan[i].phe)  khoangcachcho=40;
        else if(doituong.id==3) khoangcachcho=0;
        else khoangcachcho=5;

        if( (doituong.phe==danhsachquan[i].phe && danhsachquan[i].stt<doituong.stt) || doituong.phe != danhsachquan[i].phe ) {
            if( max(danhsachquan[i].l, doituong.l) <= min(danhsachquan[i].r, doituong.r) ) CanMove=false;

            if( ((abs(doituong.r - danhsachquan[i].l) <= khoangcachcho) && !doituong.phe )  ||  (( abs(danhsachquan[i].r - doituong.l) <= khoangcachcho ) && doituong.phe) ) {
                CanMove=false;
                break;
            }
        }

        if(doituong.id==3) {
            if(doituong.phe==danhsachquan[i].phe && danhsachquan[i].stt<doituong.stt && !doituong.phe && danhsachquan[i].id<8)
                if(danhsachquan[i].l - doituong.r - 3 <= khoangcachcho) deltax=2;

            if(doituong.phe==danhsachquan[i].phe && danhsachquan[i].stt<doituong.stt && doituong.phe && danhsachquan[i].id<8)
                if(doituong.l - danhsachquan[i].r - 3 <= khoangcachcho) deltax=-2;
        }
    }

//    if(doituong.id==3 && doituong.phe) cout<<doituong.stt<<" "<<EnemyInRange<<" "<<CanMove<<" "<<deltax<<"\n";

    if(doituong.HP <= 0) { //kiểm tra xem có ở ngưỡng máu tử hay không
        if(doituong.deadframe<=6*delays) { //gọi từ 0 -> được 6*delays lần từ 0-47, khi ở 47 thì đã có cộng luôn lên 6*delays để erase đối tượng
            LoadSprite(doituong.Textt, taolink(doituong.id, "Death"), doituong.deadframe, delays, 0, doituong.phe);
            doituong.deadframe++;
            if(doituong.deadframe==6*delays) ClearTroop(doituong.stt);
        }
    }
    else {
        if(EnemyInRange) {
            if(doituong.id==3) { //TH đặc biệt -> tấn công xong die luôn
                if(doituong.deadframe==0) doituong.HP=2000; //fix đang nổ thì bị pháp sư giết -> cancel đòn nổ
                LoadSprite(doituong.Textt, taolink(doituong.id, "Attack"), doituong.deadframe, delays, 0, doituong.phe); //vì con cá nổ xong cũng đi luôn -> dùng sài tạm biến deadframe thay biến attackframe
                if(doituong.deadframe==3*delays) {
                    int mn=80, sttdich;
                    for(int i=0; i<danhsachquan.size(); i++)
                        if(danhsachquan[i].stt==doituong.stt) sttdich=i;

                    for(int i=0; i<danhsachquan.size(); i++) {
                        if(danhsachquan[i].phe == doituong.phe) continue;
                        if( abs(doituong.l - danhsachquan[i].l) < mn ) {
                            mn = abs(doituong.l - danhsachquan[i].l);
                            sttdich=i;
                        }
                    }
                    tancong(doituong, danhsachquan[sttdich]);
                }
                doituong.deadframe++;
                if(doituong.deadframe==6*delays) ClearTroop(doituong.stt);
            }
            else if(doituong.attackframe<(6*delays)) { //trong chu trình tấn công -> chạy hoạt ảnh tấn công, tấn công và di chuyển nếu có thể
                if(doituong.id==5 && AllyInFrontOfArcher) LoadSprite(doituong.Textt, taolink(doituong.id, "Attack2"), doituong.attackframe, delays, 0, doituong.phe);
                else LoadSprite(doituong.Textt, taolink(doituong.id, "Attack"), doituong.attackframe, delays, 0, doituong.phe);

                if( doituong.attackframe == (6*delays-1) ) {
                    //xác định kẻ địch gần nhất
                    int mn=1000, sttdich=0;
                    for(int i=0; i<danhsachquan.size(); i++) {
                        if(danhsachquan[i].phe == doituong.phe) continue;
                        if( abs(doituong.l - danhsachquan[i].l) < mn ) {
                            mn = abs(doituong.l - danhsachquan[i].l);
                            sttdich=i;
                        }
                    }
                    tancong(doituong, danhsachquan[sttdich]);
                }

                doituong.attackframe++;
                if(doituong.attackframe==6*delays) doituong.cooldownframe=0;
            }
            else { //không trong đợt tấn công -> tiến tiếp hoặc đứng yên đợi
                if(CanMove) {
                    LoadSprite(doituong.Textt, taolink(doituong.id, "Walk"), frame, delays, 0, doituong.phe);
                    doituong.Textt.xx += deltax;
                    doituong.l += deltax;
                    doituong.r += deltax;
                }
                else LoadSprite(doituong.Textt, taolink(doituong.id, "Idle"), frame, delays, 0, doituong.phe);

                if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
                if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
            }

        }
        else if(CanMove) {
            LoadSprite(doituong.Textt, taolink(doituong.id, "Walk"), frame, delays, 0, doituong.phe);
            doituong.Textt.xx += deltax;
            doituong.l += deltax;
            doituong.r += deltax;

            if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
            if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
        }
        else {
            LoadSprite(doituong.Textt, taolink(doituong.id, "Idle"), frame, delays, 0, doituong.phe);

            if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
            if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
        }
    }
}

void LoadSpriteHero(LTexture &Textt, string path, int frame, int timedelay, int numsheets, bool flip) {
    if(path != "-1" && !Textt.loadFromFile(path.c_str())) {
        cout<<"Khong mo duoc link sau: "<<path<<"\n";
        exit(0);
    }

    int xsum=Textt.getWidth();
    int ysum=Textt.getHeight();

    if(numsheets == 0) { //nếu không phải objectile thì đầu vào là 0
        numsheets = xsum/ysum;
    }

    SDL_Rect KichThuoc[numsheets+1];
    for(int i=0; i<numsheets; i++) {
        KichThuoc[i].x= 120+i*(xsum/numsheets);
        KichThuoc[i].y= 30;
        KichThuoc[i].w= 240;
        KichThuoc[i].h= 240;
    }

    SDL_Rect* currentClip = &KichThuoc[ (frame / timedelay)%numsheets ];
    Textt.render( Textt.xx , 0, currentClip, flip, true);
}

void WorkHero(Troop &doituong) {
    bool EnemyInRange=false;
    for(int i=0; i<danhsachquan.size(); i++) {
        if(danhsachquan[i].phe == doituong.phe) continue;
        if( ((abs(doituong.r - danhsachquan[i].l) <= doituong.range) && !doituong.phe )  ||  (( abs(danhsachquan[i].r - doituong.l) <= doituong.range ) && doituong.phe) ) {
            EnemyInRange=true;
            break;
        }
        if( max(danhsachquan[i].l, doituong.l) <= min(danhsachquan[i].r, doituong.r) ) EnemyInRange=true;
    }

    int khoangcachcho=5;
    int deltax=doituong.SPD;

    bool CanMove=true;
    for(int i=0; i<danhsachquan.size(); i++) {
        if(danhsachquan[i].stt == doituong.stt) continue;

        if( (doituong.phe==danhsachquan[i].phe && danhsachquan[i].stt<doituong.stt) || doituong.phe != danhsachquan[i].phe )
            if( max(danhsachquan[i].l, doituong.l) <= min(danhsachquan[i].r, doituong.r) ) CanMove=false;

        if( ((abs(doituong.r - danhsachquan[i].l) <= khoangcachcho) && !doituong.phe )  ||  (( abs(danhsachquan[i].r - doituong.l) <= khoangcachcho ) && doituong.phe) ) {
            CanMove=false;
            break;
        }
        if(doituong.phe==danhsachquan[i].phe && danhsachquan[i].stt<doituong.stt)
            if(danhsachquan[i].l - doituong.r - 3 <= khoangcachcho) deltax=2;
    }


    if(doituong.HP <= 0) { //kiểm tra xem có ở ngưỡng máu tử hay không
        if(doituong.deadframe<=6*delays) { //gọi từ 0 -> được 6*delays lần từ 0-47, khi ở 47 thì đã có cộng luôn lên 6*delays để erase đối tượng
            LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Death"), doituong.deadframe, delays, 0, doituong.phe);
            doituong.deadframe++;
            if(doituong.deadframe==6*delays) ClearTroop(doituong.stt);
        }
    }
    else {
        if(EnemyInRange) {
            if(doituong.attackframe<(6*delays)) { //trong chu trình tấn công -> chạy hoạt ảnh tấn công, tấn công và di chuyển nếu có thể
                LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Attack"), doituong.attackframe, delays, 0, doituong.phe);

                if( doituong.attackframe == (6*delays-1) ) {
                    //xác định kẻ địch gần nhất
                    int mn=1000, sttdich=0;
                    for(int i=0; i<danhsachquan.size(); i++) {
                        if(danhsachquan[i].phe == doituong.phe) continue;
                        if( abs(doituong.l - danhsachquan[i].l) < mn ) {
                            mn = abs(doituong.l - danhsachquan[i].l);
                            sttdich=i;
                        }
                    }
                    tancong(doituong, danhsachquan[sttdich]);
                }

                doituong.attackframe++;
                if(doituong.attackframe==6*delays) doituong.cooldownframe=0;
            }
            else { //không trong đợt tấn công -> tiến tiếp hoặc đứng yên đợi
                if(CanMove) {
                    LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Walk"), frame, delays, 0, doituong.phe);
                    doituong.Textt.xx += deltax;
                    doituong.l += deltax;
                    doituong.r += deltax;
                }
                else LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Idle"), frame, delays, 0, doituong.phe);

                if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
                if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
            }

        }
        else if(CanMove) {
            LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Walk"), frame, delays, 0, doituong.phe);
            doituong.Textt.xx += deltax;
            doituong.l += deltax;
            doituong.r += deltax;

            if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
            if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
        }
        else {
            LoadSpriteHero(doituong.Textt, taolink(doituong.id, "Idle"), frame, delays, 0, doituong.phe);

            if(doituong.cooldownframe < 12*delays) doituong.cooldownframe++;
            if(doituong.cooldownframe == 12*delays) doituong.attackframe=0;
        }
    }
}

bool AImove(bool hard, int DoiNha){
    int timesummon=400;
    if(hard || (DoiNha==2) ) timesummon=300;

    int l, r;
    if(DoiNha==2) l=1, r=3;
    else l=4, r=6;

    int id=Rand(l, r);
    if(hard && Rand(1, 2)==1 && !binhchungplayer.empty()) {
        id=1;
        if(DoiNha==3) id=4;

        if(binhchungplayer.front()==1) id+=2;
        if(binhchungplayer.front()==3) id++;
    }

    if(frame%timesummon==0) CreateTroop( id, 1, hard );
}

void SaveData() {
    ofstream fo("data.txt");

    fo<<frame<<" "<<cntlinh<<" "<<cntlinhplayer<<" "<<cntlinhbot<<" "<<playergold<<" "<<trangthai<<" "<<chedokho<<"\n";

    fo<<danhsachquan.size()<<"\n";
    for(int i=0; i<danhsachquan.size(); i++) {
        fo<<danhsachquan[i].stt<<" ";
        fo<<danhsachquan[i].l<<" "<<danhsachquan[i].r<<" ";
        fo<<danhsachquan[i].id<<" ";
        fo<<danhsachquan[i].phe<<" ";
        fo<<danhsachquan[i].binhchung<<" ";
        fo<<danhsachquan[i].HP<<" ";
        fo<<danhsachquan[i].dame<<" ";
        fo<<danhsachquan[i].SPDatk<<" ";
        fo<<danhsachquan[i].range<<" ";
        fo<<danhsachquan[i].SPD<<" ";
        fo<<danhsachquan[i].deadframe<<" ";
        fo<<danhsachquan[i].attackframe<<" ";
        fo<<danhsachquan[i].cooldownframe<<" ";
        fo<<danhsachquan[i].cost<<" ";
        fo<<danhsachquan[i].killreward<<" ";
        fo<<danhsachquan[i].prev<<" ";
        fo<<danhsachquan[i].behind<<" ";
        fo<<"\n";
    }
    danhsachquan.clear();

    fo<<binhchungplayer.size()<<"\n";
    while(!binhchungplayer.empty()) {
        fo<<binhchungplayer.front()<<" ";
        binhchungplayer.pop();
    }

    fo.close();
}

void LoadData() {
    ifstream fi("data.txt");

    fi>>frame>>cntlinh>>cntlinhplayer>>cntlinhbot>>playergold>>trangthai>>chedokho;

    int n;
    fi>>n;
    for(int i=0; i<n; i++) {
        Troop Linh;
        fi>>Linh.stt;
        fi>>Linh.l>>Linh.r;
        fi>>Linh.id;
        fi>>Linh.phe;
        fi>>Linh.binhchung;
        fi>>Linh.HP;
        fi>>Linh.dame;
        fi>>Linh.SPDatk;
        fi>>Linh.range;
        fi>>Linh.SPD;
        fi>>Linh.deadframe;
        fi>>Linh.attackframe;
        fi>>Linh.cooldownframe;
        fi>>Linh.cost;
        fi>>Linh.killreward;
        fi>>Linh.prev;
        fi>>Linh.behind;
        Linh.Textt.xx=Linh.l;
        danhsachquan.push_back(Linh);
    }

    int m;
    fi>>m;
    for(int i=0; i<m; i++) {
        int x;
        fi>>x;
        binhchungplayer.push(x);
    }

    fi.close();
}

void LoadNewData() {
    ifstream fi("newdata.txt");

    fi>>frame>>cntlinh>>cntlinhplayer>>cntlinhbot>>playergold>>trangthai>>chedokho;

    int n;
    fi>>n>>n;

    fi.close();
}

void ClearData() {
    frame=0;
    cntlinh=0;
    cntlinhplayer=0;
    cntlinhbot=0;
    playergold=200;
    danhsachquan.clear();
    while(!binhchungplayer.empty()) {
        binhchungplayer.pop();
    }
}

int ThutuToPos(int thutu) {
    for(int i=0; i<danhsachquan.size(); i++)
        if(danhsachquan[i].stt == thutu) return i;
    return -1;
}

void UltimateSkill() { //ứng dụng thuật toán dijkstra
    if(playergold < 200) return;
    else playergold -= 200;

    int ChosenOne = -1, priovalue=-1;
    for(int i=0; i<danhsachquan.size(); i++)
        if(danhsachquan[i].phe && danhsachquan[i].id<8) {
            int score=0, cnt=0;
            int n=danhsachquan.size();
            int dp[ n ];
            for(int j=0; j<n; j++) dp[j]=111105;
            priority_queue<pair<int, int>> q;
            dp[i]=0;
            q.push({-0, i});

            while(!q.empty() && cnt<5) {
                int val = -q.top().first;
                int id = q.top().second;
                q.pop();
                if(val>dp[id]) continue;

                cnt++;
                if(danhsachquan[id].HP <= 100-cnt*10) score++;

                int pos= ThutuToPos(danhsachquan[id].prev);
                if(pos != -1)
                    if(dp[pos] > dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l) ) {
                        dp[pos] = dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l);
                        q.push({-dp[pos], pos});
                    }
                pos= ThutuToPos(danhsachquan[id].behind);
                if(pos != -1)
                    if(dp[pos] > dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l) ) {
                        dp[pos] = dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l);
                        q.push({-dp[pos], pos});
                    }
            }

            if(score>priovalue) {
                priovalue=score;
                ChosenOne=i;
            }
        }

    //ghi nhan TH toi uu va tan cong linh
    if(ChosenOne !=-1) {
        int cnt=0;
        int n=danhsachquan.size();
        int dp[ n ];
        for(int j=0; j<n; j++) dp[j]=111105;
        priority_queue<pair<int, int>> q;
        dp[ChosenOne]=0;
        q.push({-0, ChosenOne});

        while(!q.empty() && cnt<5) {
            int val = -q.top().first;
            int id = q.top().second;
            q.pop();
            if(val>dp[id]) continue;

            cnt++;
            cout<<danhsachquan[id].stt<<" ";
            danhsachquan[id].HP -= 100-cnt*10;

            int pos= ThutuToPos(danhsachquan[id].prev);
            if(pos != -1)
                if(dp[pos] > dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l) ) {
                    dp[pos] = dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l);
                    q.push({-dp[pos], pos});
                }
            pos= ThutuToPos(danhsachquan[id].behind);
            if(pos != -1)
                if(dp[pos] > dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l) ) {
                    dp[pos] = dp[id] +abs(danhsachquan[id].l - danhsachquan[pos].l);
                    q.push({-dp[pos], pos});
                }
        }
        cout<<"\n";
    }
}

///~~~~~~~~~~~~~~~~~~~~~~~~~~~end merge 2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int main( int argc, char* args[] )
{   srand(time(NULL));
	//Start up SDL and create window
	if( !init() )
	{
		printf( "Failed to initialize!\n" );
		return 0;
	}

    //Main loop flag
    bool quit = false;

    //Event handler
    SDL_Event e;

    //Current animation frame

    SDL_SetRenderDrawColor( gRenderer, 255, 255, 255, 255 );
    SDL_RenderClear( gRenderer );

    //generate bases
    if(trangthai == 2) {
        CreateTroop(8, 0);
        CreateTroop(8, 1, chedokho);
    }
    else {
        CreateTroop(9, 0);
        CreateTroop(9, 1, chedokho);
    }

    //While application is running
    while( !quit )
    {
        //Handle events on queue
        while( SDL_PollEvent( &e ) != 0 )
        {
            //User requests quit
            if( e.type == SDL_QUIT )
            {
                quit = true;
            }
        }


        SDL_SetRenderDrawColor( gRenderer, 255, 255, 255, 255 );
        SDL_RenderClear( gRenderer );

///~~~~~~~~~main change to test game~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//        if(frame%100==0) cout<<frame<<"\n";
        //Player but it is a BOT
        if(frame%400==0 && !(1000<frame && frame<(1000+200)) ) {
            int l=1, r=3;
            if(trangthai==3) l=4, r=7;
            CreateTroop(Rand(l,r), 0);
        }
//        if(frame%800==0 && !(1000<frame && frame<(1000+200)) ) UltimateSkill();

        int changee=1000;

        if( !(changee<frame && frame<(changee+200)) && 2<=trangthai && trangthai<=3) AImove(chedokho, trangthai);

        if(frame==changee) {
            changee=0;
            SaveData();
//            quit=true;
        }

        int change2=1100;
        if(frame==change2) {
            change2=-1;
            LoadData();
            frame=1100;
        }

        for(int i=0; i<danhsachquan.size(); i++) {
            if(danhsachquan[i].Textt.xx <-100 || danhsachquan[i].Textt.xx >1400) ClearTroop(danhsachquan[i].stt); //delete this one
            if(danhsachquan[i].id < 7) Work(danhsachquan[i]);
            else if(danhsachquan[i].id == 7) WorkHero(danhsachquan[i]);
            else WorkBase(danhsachquan[i]);
        }

        SDL_RenderPresent( gRenderer );

        frame++;
    }



	//Free resources and close SDL
	close();

	return 0;
}

